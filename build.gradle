plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'jacoco'
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation(platform("software.amazon.awssdk:bom:2.20.136"))
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'software.amazon.awssdk:aws-core'
    implementation 'software.amazon.awssdk:sdk-core'
    implementation 'software.amazon.awssdk:sts'
    implementation 'software.amazon.awssdk:s3'

    runtimeOnly 'com.mysql:mysql-connector-j'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-core:3.+'
    testImplementation 'org.testcontainers:testcontainers:1.19.0'
    testImplementation 'com.redis.testcontainers:testcontainers-redis-junit:1.6.4'
    testImplementation 'org.testcontainers:localstack:1.19.0'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'com.tngtech.archunit:archunit:1.1.0'
}

tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.xml"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.5)
            }

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                minimum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.controller.*",
                    "com.example.springtest.SpringTestApplication",
                    "com.example.springtest.calculator.MyCalculatorApplication"
            )
        }
    }
}